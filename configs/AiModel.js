const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


  export const courseOutlineAIModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {
            text: '`Generate a JSON object that represents study notes for a course chapter. The JSON should meet the following requirements:\n0. Provided Chapters:\n{\n      "chapterTitle": "Networking and Multiplayer Game Development",\n      "chapterSummary": "Understand the complexities of building online multiplayer games, including networking protocols, synchronization techniques, and security.",\n      "emoji": "üåê",\n      "topics": [\n        "Client-server architecture",\n        "Peer-to-peer networking",\n        "Network synchronization techniques (Lag compensation, interpolation)",\n        "Security considerations for online games",\n        "Game networking libraries and APIs"\n      ]\n},\n\n1. Structure:\nThe JSON must include the following fields:\nchapterTitle (string): The title of the chapter.\nchapterSummary (string): A brief summary of the chapter.\nemoji (string): A relevant emoji to visually represent the chapter.\ntopics (array): A list of topics covered in the chapter. Each topic must be an object with:\ntopicTitle (string): The title of the topic.\ncontent (string): Detailed content for the topic written in HTML format, styled with Tailwind CSS, and ready for rendering in a React.js component.\n\n2. Content Formatting:\nHTML Requirements:\nWrap all content in <div> elements with Tailwind CSS classes, such as p-4, bg-gray-100, rounded-lg, shadow-md, etc.\nUse semantic HTML elements:\n<h3> for topic titles.\n<p> for text paragraphs.\n<div> with list-disc and list-item classes for lists.\nEscape all special characters properly to ensure valid JSON formatting.\nUse className instead of class for styling compatibility with React.js.\nMake the HTML content visually attractive:\nUse Tailwind CSS classes for enhanced styling, such as bg-gradient-to-r, text-center, text-xl, hover:bg-blue-200, etc.\nAdd additional styling to make each topic\'s content visually engaging and modern-looking.\n\n3. Styling Guidelines:\nApply Tailwind CSS classes for responsive, aesthetic designs:\nPadding: p-4, p-2, etc.\nBackgrounds: bg-gray-100, bg-blue-200, bg-gradient-to-r, etc.\nBorders and shadows: rounded-lg, shadow-md, etc.\nHover effects: hover:bg-blue-200, hover:text-white, etc.\nMaintain consistency with font styles (text-lg, font-bold, text-gray-700).\nEnsure the layout is visually appealing, with elements spaced out cleanly and a good balance of colors and fonts.\n\n4. Error-Free Output:\nEnsure the JSON is valid and parsable without errors.\nProperly escape quotation marks ("), line breaks (\\n), and backslashes (\\\\) within strings.\nThere should not be any Expecting \'STRING\', \'NUMBER\', \'NULL\', \'TRUE\', \'FALSE\', \'{\', \'[\', got \'undefined\'\nDo not include undefined or null values in the JSON.\nReplace any missing data with appropriate placeholders or omit invalid entries entirely.\n\n5. Application Context:\nThe JSON will be used in a React.js application styled with Tailwind CSS. Ensure compatibility with this environment by:\nUsing className for all HTML elements.\nMaintaining clean, modular HTML snippets that can be directly rendered in React components.\n\n**IMPORTANT**\nThere should be an emoji\nCheck twice or thrice that the output is like the given output example format (#6)\nCheck twice or thrice to ensure that the JSON is valid and parsable without errors and that the application context is valid before continuing to use it as a React component.\n\n### 6. **Output Example:**\n{\n    "chapterTitle": "Networking and Multiplayer Game Development",\n    "chapterSummary": "Understand the complexities of building online multiplayer games, including networking protocols, synchronization techniques, and security.",\n    "emoji": "üåê",\n    "topics": [\n        {\n            "topicTitle": "Client-server architecture",\n            "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Client-server architecture</h3><p className=\\"text-gray-700\\">In a client-server architecture, multiple clients connect to a central server. The server manages game state, handles player interactions, and distributes updates to the clients.  This architecture is suitable for large-scale games where managing game state on individual clients is impractical. The server is responsible for authoritative updates which keeps the game fair and consistent.  Clients send input to the server and receive updates on other players and game events.</p></div>"\n        },\n        {\n            "topicTitle": "Peer-to-peer networking",\n            "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Peer-to-peer networking</h3><p className=\\"text-gray-700\\">In peer-to-peer (P2P) networking, each client acts as both a client and a server, communicating directly with other clients.  This eliminates the need for a central server, simplifying development and reducing latency. However, managing game state and preventing cheating can be more complex in P2P architectures.  P2P is well suited for small, low-latency games.</p></div>"\n        },\n        {\n            "topicTitle": "Network synchronization techniques (Lag compensation, interpolation)",\n            "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Network synchronization techniques (Lag compensation, interpolation)</h3><p className=\\"text-gray-700\\">Network synchronization is crucial in multiplayer games to ensure consistency across all clients.  Lag compensation predicts player movement based on network latency, reducing the impact of delays. Interpolation smooths out jerky movements by interpolating between received updates, improving the visual experience.</p></div>"\n        },\n        {\n            "topicTitle": "Security considerations for online games",\n            "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Security considerations for online games</h3><p className=\\"text-gray-700\\">Security is paramount in online games.  Protecting against cheating (e.g., aimbots, wallhacks) requires robust server-side validation and anti-cheat measures.  Protecting player data (e.g., accounts, personal information) necessitates secure authentication and encryption protocols.</p></div>"\n        },\n        {\n            "topicTitle": "Game networking libraries and APIs",\n            "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Game networking libraries and APIs</h3><p className=\\"text-gray-700\\">Game networking libraries and APIs simplify network programming.  Popular choices include Unity\'s UNET, Unreal Engine\'s networking features, and third-party libraries like RakNet and ENet. These libraries handle low-level networking details, allowing developers to focus on game logic.</p></div>"\n        }\n    ]\n}\n\n\n\n 7. **Additional Notes:**  \n   - **IMPORTANT** There should be an emoji\n   - Every Content should be in detail and explained properly\n   - Each \'content\' field should use simple and concise language suitable for study notes.  \n   - Ensure that topics include clear definitions, key points, and, where appropriate, examples or sample code.  \n   - All generated content should be focused on clarity and exam preparation, with minimal redundancy.  \n\n 8. **Avoid Common Errors:**  \n   - Do not generate outputs with unescaped special characters (e.g., \'Error: Parse error on line...\').  \n   - Double-check for mismatched brackets, missing fields, or improperly formatted strings.  \n   - Do not generate incomplete or ambiguous JSON objects.`;\n',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "chapterTitle": "Networking and Multiplayer Game Development",\n  "chapterSummary": "Understand the complexities of building online multiplayer games, including networking protocols, synchronization techniques, and security.",\n  "emoji": "üåê",\n  "topics": [\n    {\n      "topicTitle": "Client-server architecture",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Client-server architecture</h3><p className=\\"text-gray-700\\">In a client-server architecture, multiple clients connect to a central server. The server manages the game state, handles player interactions, and distributes updates to the clients. This architecture is suitable for large-scale games where managing game state on individual clients is impractical. The server is responsible for authoritative updates, ensuring fair and consistent gameplay. Clients send input to the server and receive updates on other players and game events.  This centralized approach simplifies cheat detection and game balance management.</p></div>"\n    },\n    {\n      "topicTitle": "Peer-to-peer networking",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Peer-to-peer networking</h3><p className=\\"text-gray-700\\">In peer-to-peer (P2P) networking, each client acts as both a client and a server, communicating directly with other clients. This eliminates the need for a central server, simplifying development and potentially reducing latency. However, managing game state and preventing cheating can be more complex in P2P architectures.  P2P is well-suited for smaller games or those where low latency is paramount.  Challenges include maintaining game consistency across all peers and implementing robust cheat detection mechanisms.</p></div>"\n    },\n    {\n      "topicTitle": "Network synchronization techniques (Lag compensation, interpolation)",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Network synchronization techniques (Lag compensation, interpolation)</h3><p className=\\"text-gray-700\\">Network synchronization is crucial for consistent gameplay across all clients.  Lag compensation predicts player movement based on network latency, mitigating the impact of delays.  Interpolation smooths out jerky movements by interpolating between received updates, improving the visual experience.  These techniques help create a more responsive and enjoyable gaming experience, even with varying network conditions. </p></div>"\n    },\n    {\n      "topicTitle": "Security considerations for online games",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Security considerations for online games</h3><p className=\\"text-gray-700\\">Security is paramount in online games. Protecting against cheating (e.g., aimbots, wallhacks) requires robust server-side validation and anti-cheat measures. Protecting player data (e.g., accounts, personal information) necessitates secure authentication and encryption protocols.  Consider using strong encryption for communication and data storage, regular security audits, and robust input validation to minimize vulnerabilities.</p></div>"\n    },\n    {\n      "topicTitle": "Game networking libraries and APIs",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Game networking libraries and APIs</h3><p className=\\"text-gray-700\\">Game networking libraries and APIs simplify network programming. Popular choices include Unity\'s UNET, Unreal Engine\'s networking features, and third-party libraries like RakNet and ENet. These libraries handle low-level networking details, allowing developers to focus on game logic.  Choosing the right library depends on factors such as the game\'s architecture (client-server vs. P2P), scalability requirements, and platform support.</p></div>"\n    }\n  ]\n}\n```\n',
          },
        ],
      },
    ],
  });

  export const generateNotesAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {
            text: 'Generate a JSON object that represents study notes for a course chapter. The JSON should meet the following requirements:  \n\n# Enhanced Prompt for Gemini API\n\n## **Prompt**\n\nGenerate a JSON object that represents study notes for a course chapter. The JSON should meet the following requirements:\n\n## 0. **Provided Input will be like:**\n{\n      "chapterTitle": "Object-Oriented Programming (OOP) Principles in C#",\n      "chapterSummary": "Deep dive into the core tenets of OOP: encapsulation, inheritance, and polymorphism.  Learn how these principles are implemented in C#.",\n      "emoji": "üß±",\n      "topics": [\n        "Classes and Objects",\n        "Encapsulation (Access Modifiers)",\n        "Inheritance (Base and Derived Classes)",\n        "Polymorphism (Method Overriding and Interfaces)",\n        "Abstract Classes",\n        "Interfaces"\n      ]\n    },\n\n### 1. **Structure:**  \n   - The JSON must include the following fields:  \n     - `chapterTitle` (string): The title of the chapter.  \n     - `chapterSummary` (string): A brief summary of the chapter.  \n     - `emoji` (string): A relevant emoji to visually represent the chapter.  \n     - `topics` (array): A list of topics covered in the chapter. Each topic must be an object with:  \n       - `topicTitle` (string): The title of the topic.  \n       - `content` (string): Detailed content for the topic written in HTML format, styled with Tailwind CSS, and ready for rendering in a React.js component.\n\n### 2. **Content Formatting:**  \n   - **HTML Requirements:**  \n     - Wrap all content in `<div>` elements with Tailwind CSS classes, such as `p-4`, `bg-gray-100`, `rounded-lg`, `shadow-md`, etc.  \n     - Use semantic HTML elements:  \n       - `<h3>` for topic titles.  \n       - `<p>` for text paragraphs.  \n       - `<div>` with `list-disc` and `list-item` classes for lists.  \n     - Escape all special characters properly to ensure valid JSON formatting.  \n     - Use `className` instead of `class` for styling compatibility with React.js.  \n     - **Make the HTML content visually attractive:**  \n       - Use Tailwind CSS classes for enhanced styling, such as `bg-gradient-to-r`, `text-center`, `text-xl`, `hover:bg-blue-200`, etc.  \n       - Add additional styling to make each topic\'s content visually engaging and modern-looking.\n\n### 3. **Styling Guidelines:**  \n   - Apply Tailwind CSS classes for responsive, aesthetic designs:  \n     - Padding: `p-4`, `p-2`, etc.  \n     - Backgrounds: `bg-gray-100`, `bg-blue-200`, `bg-gradient-to-r`, etc.  \n     - Borders and shadows: `rounded-lg`, `shadow-md`, etc.  \n     - Hover effects: `hover:bg-blue-200`, `hover:text-white`, etc.  \n   - Maintain consistency with font styles (`text-lg`, `font-bold`, `text-gray-700`).\n   - Ensure the layout is visually appealing, with elements spaced out cleanly and a good balance of colors and fonts.\n\n### 4. **Error-Free Output:**  \n   - Ensure the JSON is valid and parsable without errors.  \n     - Properly escape quotation marks (`"`), line breaks (`\\n`), and backslashes (`\\\\`) within strings.  \n     - Do not include `undefined` or `null` values in the JSON.  \n There should not be any Expecting `STRING`, `NUMBER`, `NULL`, `TRUE`, `FALSE`, `{`, `[`, got `undefined`\n\n     - Replace any missing data with appropriate placeholders or omit invalid entries entirely.  \n\n### 5. **Application Context:**  \n   - The JSON will be used in a React.js application styled with Tailwind CSS. Ensure compatibility with this environment by:  \n     - Using `className` for all HTML elements.  \n     - Maintaining clean, modular HTML snippets that can be directly rendered in React components.\n\n  **IMPORTANT**\n Check twice or thrice to ensure that the JSON is valid and parsable without errors and that the application context is valid before continuing to use it as a React component.\n\n  ### 6. **Output Example:**\n```json\n{\n  "chapterTitle": "Introduction to Machine Learning",\n  "chapterSummary": "This chapter covers the basics of machine learning, including its definition, applications, and key algorithms.",\n  "emoji": "ü§ñ",\n  "topics": [\n    {\n      "topicTitle": "What is Machine Learning?",\n      "content": "<div className=\'p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\'><h3 className=\'text-lg font-bold mb-2 text-xl text-center\'>What is Machine Learning?</h3><p className=\'text-gray-700\'>Machine learning is a branch of artificial intelligence that focuses on building systems that can learn from data to make decisions or predictions.</p></div>"\n    },\n    {\n      "topicTitle": "Types of Machine Learning",\n      "content": "<div className=\'p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\'><h3 className=\'text-lg font-bold mb-2 text-xl text-center\'>Types of Machine Learning</h3><div className=\'list list-disc pl-5\'><div className=\'list-item\'>Supervised Learning</div><div className=\'list-item\'>Unsupervised Learning</div><div className=\'list-item\'>Reinforcement Learning</div></div></div>"\n    }\n  ]\n}\n\n### 7. **Additional Notes:**  \n  -There should be an emoji\n - Every Content should be in detail and explained properly\n   - Each `content` field should use simple and concise language suitable for study notes.  \n   - Ensure that topics include clear definitions, key points, and, where appropriate, examples or sample code.  \n   - All generated content should be focused on clarity and exam preparation, with minimal redundancy.  \n\n### 8. **Avoid Common Errors:**  \n   - Do not generate outputs with unescaped special characters (e.g., `Error: Parse error on line...`).  \n   - Double-check for mismatched brackets, missing fields, or improperly formatted strings.  \n   - Do not generate incomplete or ambiguous JSON objects.',
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "chapterTitle": "Object-Oriented Programming (OOP) Principles in C#",\n  "chapterSummary": "Deep dive into the core tenets of OOP: encapsulation, inheritance, and polymorphism. Learn how these principles are implemented in C#.",\n  "emoji": "üß±",\n  "topics": [\n    {\n      "topicTitle": "Classes and Objects",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Classes and Objects</h3><p className=\\"text-gray-700\\">A class is a blueprint for creating objects.  It defines the data (fields/properties) and behavior (methods) of objects. An object is an instance of a class.  For example, a <code>Car</code> class might define properties like <code>color</code>, <code>model</code>, and <code>speed</code>, and methods like <code>Start()</code>, <code>Accelerate()</code>, and <code>Brake()</code>.  Creating a specific red Honda Civic would be creating an object of the <code>Car</code> class.</p><pre className=\\"bg-gray-200 p-4 rounded-lg\\"><code className=\\"text-sm text-gray-800\\">public class Car {<br>    public string color; <br>    public string model; <br>    public int speed;<br>    public void Start() { /* ... */ }<br>    public void Accelerate() { /* ... */ }<br>    public void Brake() { /* ... */ }<br>}</code></pre></div>"\n    },\n    {\n      "topicTitle": "Encapsulation (Access Modifiers)",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Encapsulation (Access Modifiers)</h3><p className=\\"text-gray-700\\">Encapsulation bundles data and methods that operate on that data within a class, protecting it from outside access. Access modifiers (<code>public</code>, <code>private</code>, <code>protected</code>, <code>internal</code>) control the visibility and accessibility of class members.  <code>private</code> members are only accessible within the class itself, promoting data hiding and security.</p><pre className=\\"bg-gray-200 p-4 rounded-lg\\"><code className=\\"text-sm text-gray-800\\">public class Person {<br>    private string _name; // Private field<br>    public string Name { // Public property for controlled access<br>        get { return _name; }<br>        set { _name = value; }<br>    }<br>}</code></pre></div>"\n    },\n    {\n      "topicTitle": "Inheritance (Base and Derived Classes)",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Inheritance (Base and Derived Classes)</h3><p className=\\"text-gray-700\\">Inheritance allows a class (derived class) to inherit properties and methods from another class (base class). This promotes code reusability and establishes an \\"is-a\\" relationship.  For example, a <code>SportsCar</code> class could inherit from a <code>Car</code> class, inheriting its properties and adding its own specific features.</p><pre className=\\"bg-gray-200 p-4 rounded-lg\\"><code className=\\"text-sm text-gray-800\\">public class Car { /* ... */ }<br>public class SportsCar : Car {<br>    public int turboBoost; <br>}</code></pre></div>"\n    },\n    {\n      "topicTitle": "Polymorphism (Method Overriding and Interfaces)",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Polymorphism (Method Overriding and Interfaces)</h3><p className=\\"text-gray-700\\">Polymorphism allows objects of different classes to be treated as objects of a common type.  Method overriding lets a derived class provide a specific implementation for a method that is already defined in its base class. Interfaces define a contract that classes can implement, providing a way to achieve polymorphism through different implementations of the same interface methods.</p><pre className=\\"bg-gray-200 p-4 rounded-lg\\"><code className=\\"text-sm text-gray-800\\">public interface IAnimal {<br>    void MakeSound();<br>}<br>public class Dog : IAnimal {<br>    public void MakeSound() { Console.WriteLine(\\"Woof!\\"); }<br>}<br>public class Cat : IAnimal {<br>    public void MakeSound() { Console.WriteLine(\\"Meow!\\"); }<br>}</code></pre></div>"\n    },\n    {\n      "topicTitle": "Abstract Classes",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Abstract Classes</h3><p className=\\"text-gray-700\\">Abstract classes cannot be instantiated directly; they serve as blueprints for other classes. They can contain both abstract methods (methods without implementation) and concrete methods (methods with implementation).  Derived classes must provide implementations for all abstract methods inherited from the abstract class.</p><pre className=\\"bg-gray-200 p-4 rounded-lg\\"><code className=\\"text-sm text-gray-800\\">public abstract class Shape {<br>    public abstract double GetArea();<br>    public void DisplayInfo() { Console.WriteLine(\\"This is a shape\\"); }<br>}<br>public class Circle : Shape {<br>    public override double GetArea() { /* ... */ }<br>}</code></pre></div>"\n    },\n    {\n      "topicTitle": "Interfaces",\n      "content": "<div className=\\"p-4 bg-gray-100 rounded-lg shadow-md hover:bg-blue-200\\"><h3 className=\\"text-lg font-bold mb-2 text-xl text-center\\">Interfaces</h3><p className=\\"text-gray-700\\">Interfaces define a contract that classes can implement. They specify a set of methods that a class must implement, but they don\'t provide any implementation details.  A class can implement multiple interfaces, promoting flexibility and code reusability.</p><pre className=\\"bg-gray-200 p-4 rounded-lg\\"><code className=\\"text-sm text-gray-800\\">public interface IPlayable {<br>    void Play();<br>}<br>public interface IStoppable {<br>    void Stop();<br>}<br>public class MusicPlayer : IPlayable, IStoppable {<br>    public void Play() { /* ... */ }<br>    public void Stop() { /* ... */ }<br>}</code></pre></div>"\n    }\n  ]\n}\n```\n',
          },
        ],
      },
    ],
  });

  export const GenerateStudyTypeContentAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {
            text: "Generate the flashcard on topic : Flutter Fundamentals,User Interface (UI) Development,Basic App Navigation in JSON format with front back content, Maximum 15",
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n[\n  {\n    "front": "What is a Widget in Flutter?",\n    "back": "A Widget is the basic building block of a Flutter UI. Everything you see on the screen is a Widget, including text, images, buttons, and layouts."\n  },\n  {\n    "front": "What are the two main types of Widgets?",\n    "back": "StatelessWidget and StatefulWidget.  StatelessWidgets don\'t change, while StatefulWidgets can update their UI."\n  },\n  {\n    "front": "Explain the difference between StatelessWidget and StatefulWidget.",\n    "back": "StatelessWidget is immutable; its UI doesn\'t change after it\'s built. StatefulWidget is mutable; its UI can be updated using setState()."\n  },\n  {\n    "front": "What is the purpose of the `build()` method?",\n    "back": "The `build()` method is where you describe the UI of a Widget. It\'s called whenever the Widget needs to be redrawn."\n  },\n  {\n    "front": "How do you update the UI of a StatefulWidget?",\n    "back": "By calling `setState()` within the Widget. This triggers a rebuild of the Widget\'s UI."\n  },\n  {\n    "front": "Name three common layout Widgets.",\n    "back": "Row, Column, and Stack are commonly used layout Widgets to arrange children."\n  },\n  {\n    "front": "What is the role of a `Scaffold` Widget?",\n    "back": "A Scaffold provides a basic visual layout structure for your app, including an AppBar, body, and bottom navigation bar."\n  },\n  {\n    "front": "How do you navigate between screens in Flutter?",\n    "back": "Using `Navigator.push()` to push a new route onto the navigation stack and `Navigator.pop()` to remove the current route."\n  },\n  {\n    "front": "What is a Route in Flutter navigation?",\n    "back": "A Route represents a screen or page in your application\'s navigation stack."\n  },\n  {\n    "front": "What is `MaterialApp`?",\n    "back": "A `MaterialApp` widget provides a default Material Design implementation for your Flutter app, providing common Material Design widgets and navigation."\n  },\n  {\n    "front": "What is the purpose of a `BuildContext`?",\n    "back": "A `BuildContext` provides information about the location of a Widget within the widget tree.  It\'s used for accessing context-dependent information like theme or navigation."\n  },\n  {\n    "front": "How do you pass data to a new screen using navigation?",\n    "back": "Using arguments with `Navigator.pushNamed()` or `Navigator.push(context, MaterialPageRoute(builder: (context) => ... , arguments: ...))`"\n  },\n  {\n    "front": "What is a Key in Flutter?",\n    "back": "A Key helps Flutter identify widgets across rebuilds, useful for maintaining state when widgets are rearranged or rebuilt."\n  },\n  {\n    "front": "What does `Navigator.pop()` do?",\n    "back": "It removes the current route from the navigation stack, effectively going back to the previous screen."\n  },\n  {\n    "front": "What is a `MaterialPageRoute`?",\n    "back": "A `MaterialPageRoute` is a type of route that handles the transitions and animations between screens, consistent with Material Design."\n  }\n]\n```\n',
          },
        ],
      },
    ],
  });

  export const GenerateQuizAiModel = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {
            text: "Generate Quiz on topic : Flutter Fundamentals, User Interface (UI) Development, Basic App Navigation with Question and Options\nalong with correct answer in JSON format",
          },
        ],
      },
      {
        role: "model",
        parts: [
          {
            text: '```json\n{\n  "quizTitle": "Flutter Fundamentals & UI Development Quiz",\n  "questions": [\n    {\n      "question": "What is the primary programming language used in Flutter?",\n      "options": ["Java", "Kotlin", "Dart", "Swift"],\n      "answer": "Dart"\n    },\n    {\n      "question": "Which widget is the root of most Flutter applications?",\n      "options": ["Container", "Scaffold", "Column", "Row"],\n      "answer": "MaterialApp" \n    },\n    {\n      "question": "What widget is used to arrange children in a vertical line?",\n      "options": ["Row", "Column", "Stack", "Container"],\n      "answer": "Column"\n    },\n    {\n      "question": "What widget is used to arrange children horizontally?",\n      "options": ["Column", "Row", "Stack", "Container"],\n      "answer": "Row"\n    },\n    {\n      "question": "Which widget is best for displaying a list of items that can be scrolled?",\n      "options": ["ListView", "GridView", "SingleChildScrollView", "PageView"],\n      "answer": "ListView"\n    },\n    {\n      "question": "What is the purpose of a StatefulWidget in Flutter?",\n      "options": ["To create static UIs", "To create UIs that change over time", "To handle user input", "To manage app navigation"],\n      "answer": "To create UIs that change over time"\n    },\n    {\n      "question": "Which widget is commonly used to navigate between screens in a Flutter app?",\n      "options": ["Navigator", "Route", "Widget", "Scaffold"],\n      "answer": "Navigator"\n    },\n    {\n      "question": "What does `BuildContext` represent in Flutter?",\n      "options": ["The current app theme", "The current app state", "The location of a widget in the widget tree", "The device screen size"],\n      "answer": "The location of a widget in the widget tree"\n    },\n    {\n      "question": "Which method is used to push a new route onto the navigation stack?",\n      "options": ["Navigator.pop()", "Navigator.push()", "Navigator.removeRoute()", "Navigator.replaceRoute()"],\n      "answer": "Navigator.push()"\n    },\n    {\n      "question": "What is the role of a key in Flutter widgets?",\n      "options": ["To uniquely identify a widget", "To set the widget\'s size", "To define widget styling", "To handle user interactions"],\n      "answer": "To uniquely identify a widget"\n    }\n  ]\n}\n```\n',
          },
        ],
      },
    ],
  });